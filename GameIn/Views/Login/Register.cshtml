@model GameIn.Models.Users


@{
    ViewBag.Title = Resources.Resources.Register;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset class="fs_container">
        <legend>@Resources.Resources.Register</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Email, Resources.Resources.Email)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UserName, Resources.Resources.Username)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.UserName)
            @Html.ValidationMessageFor(model => model.UserName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Password, Resources.Resources.Password)
        </div>
        <div class="editor-field">
            @Html.PasswordFor(model => model.Password)
            @Html.ValidationMessageFor(model => model.Password)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name, Resources.Resources.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Gender, Resources.Resources.Gender)
        </div>
        <div class="editor-field">
            @Html.DropDownList( Resources.Resources.Gender, new SelectList ( new[] 
                    {
                        new { Value = "true", Text = @Resources.Resources.Male },
                        new { Value = "false", Text = @Resources.Resources.Female },
                    }, "Value","Text", Model)
                    )

            @Html.ValidationMessageFor(model => model.Gender)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Countries, Resources.Resources.Country)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.CountryID, new SelectList(ViewBag.CountriesList, "Value", "Text"), Resources.Resources.Select,
                        new { @class = "form-control", @onchange = "FillStates()" })
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.States, Resources.Resources.State)
        </div>
        <div class="editor-field">
            @Html.DropDownList("StatesList", Resources.Resources.Select)
            @Html.ValidationMessageFor(model => model.States)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Region, Resources.Resources.Region)
        </div>
        <div class="editor-field">
            @Html.DropDownList("CitiesList", Resources.Resources.Select)
            @Html.ValidationMessageFor(model => model.Region)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.SubRegion, Resources.Resources.SubRegion)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.SubRegion)
            @Html.ValidationMessageFor(model => model.SubRegion)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.TimeZone, Resources.Resources.TimeZone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TimeZone)
            @Html.ValidationMessageFor(model => model.TimeZone)
        </div>
        <p>
            <input type="submit" value="@Resources.Resources.CreateAccount" />
        </p>
    </fieldset>
}
@Html.Hidden("hf_lang", HttpContext.Current.Request.RequestContext.RouteData.Values["Lang"] != null
            ? HttpContext.Current.Request.RequestContext.RouteData.Values["Lang"].ToString() : "")
<div>
    @Html.ActionLink(Resources.Resources.BackLogin, "Home", "Login",
    new
    {
        lang = HttpContext.Current.Request.RequestContext.RouteData.Values["Lang"] != null
            ? HttpContext.Current.Request.RequestContext.RouteData.Values["Lang"].ToString() : ""
    }, null)
</div>

@section Scripts 
{
<script>
$("#StatesList").change(FillCities);
function FillStates()
{
    var country = $('#CountryID').val();
    var selectedLang = document.getElementById('hf_lang').value;
    $.ajax({
    url: '/Login/GetStates',
    type: "GET",
    dataType: "JSON",
    data: {
            lang: selectedLang, countryid: country
    },
    success: function (data) {
        $("#StatesList").html(""); // clear before appending new list
        $.each(data, function (i, state) {
            $("#StatesList").append(
                $('<option></option>').val(state.StateID).html(state.Name));
        });
    },
    error: function ajaxError(response) {
        alert(response.status + ' ' + response.statusText);
    }
    });
}

function FillCities()
{
    var state = $('#StatesList').val();
    var selectedLang = document.getElementById('hf_lang').value;
    $.ajax({
        url: '/Login/GetCities',
        type: "GET",
        dataType: "JSON",
        data: {
            lang: selectedLang, stateid: state
        },
        success: function (data) {
            $("#CitiesList").html(""); // clear before appending new list
            $.each(data, function (i, city) {
                $("#CitiesList").append(
                    $('<option></option>').val(city.CityID).html(city.Name));
            });
        },
        error: function ajaxError(response) {
            alert(response.status + ' ' + response.statusText);
        }
    });
}
</script>
}